C51 COMPILER V9.54   MYSELF                                                                10/21/2018 19:40:26 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MYSELF
OBJECT MODULE PLACED IN .\Objects\myself.obj
COMPILER INVOKED BY: F:\keil\C51\BIN\C51.EXE myself.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\SYSTEM;..\HARDWARE;..\USER) DEB
                    -UG OBJECTEXTEND PRINT(.\Listings\myself.lst) TABS(2) OBJECT(.\Objects\myself.obj)

line level    source

   1          #include "myself.h"
   2          #include  <STC15F2K60S2.h>
   3          #include "AD.h"
   4          #include  "Serial.h"//串口1(P3.0/RxD, P3.1/TxD)
   5          #include  "intrins.h"
   6          sbit TestKey = P5^4;//测试按键
   7          sbit TestLed = P5^5;//测试LED
   8          bit bFlagTimer0=0,bFlag2ms=0;
   9          bit TestKeyLastTime=1;//用于保存测试按键前次状态
  10          unsigned char xdata cJudgeKey=0;//用于判断按键的变量
  11          unsigned char xdata T0Counter2ms=0;
  12          unsigned char code KeyThreshold[7]={0x40,0x95,0xB6,0xC7,0xD1,0xEA,0xFF};
  13          //  键名        电压值    测量AD值      键值区间
  14          //0 KeyStartStop 0        0x00        0x00-0x40
  15          //1 KeyDown     1/2Vcc    0x81      0x41-0x95 
  16          //2 KeyMiddle   2/3Vcc    0xAB-0xAC   0x96-0xB6
  17          //3 KeyRight    3/4Vcc    0xC0-0xC1   0xB7-0xC7
  18          //4 KeyLeft     4/5Vcc    0xCE-0xCD   0xC8-0xD1
  19          //5 KeyUp       5/6Vcc    0xD6      0xD2-0xEA
  20          //6 NoneKey       Vcc     0xFF      0xEB-0xFF
  21          
  22          void DelayNms(int n)//延时Nms//@11.0592MHz
  23          {
  24   1        int i=0;
  25   1        for(i=0;i<n;i++) 
  26   1          Delay1ms();
  27   1      }
  28          
  29          void Delay1ms()   //@11.0592MHz
  30          {
  31   1        unsigned char i, j;
  32   1      
  33   1        _nop_();
  34   1        _nop_();
  35   1        _nop_();
  36   1        i = 11;
  37   1        j = 190;
  38   1        do
  39   1        {
  40   2          while (--j);
  41   2        } while (--i);
  42   1      }
  43          
  44          void Timer0Init(void)   //1毫秒@11.0592MHz
  45          {
  46   1        AUXR |= 0x80;   //定时器时钟1T模式
  47   1        TMOD &= 0xF0;   //设置定时器模式
  48   1        TL0 = 0xCD;   //设置定时初值
  49   1        TH0 = 0xD4;   //设置定时初值
  50   1        TF0 = 0;    //清除TF0标志
  51   1        TR0 = 1;    //定时器0开始计时
  52   1        ET0 = 1;  //使能定时器0中断
  53   1      
  54   1      }
C51 COMPILER V9.54   MYSELF                                                                10/21/2018 19:40:26 PAGE 2   

  55          
  56          
  57          void Timer0Interrupt() interrupt 1 using 2 //定时器0的中断
  58          {
  59   1        T0Counter2ms++;
  60   1      
  61   1        if(T0Counter2ms>=2)
  62   1        {
  63   2          bFlag2ms=1;
  64   2          T0Counter2ms=0;
  65   2          ADC_CONTR = ADC_POWER | ADC_SPEEDHH | ADC_START | 0x00;//2ms启动一次ADC   
  66   2        } 
  67   1        
  68   1      }
  69          
  70          bit KeyPress(bit KeyIO)
  71          {
  72   1        cJudgeKey=(cJudgeKey<<1) | KeyIO; // 判断值左移一位 ，并将当前扫描值入最低
  73   1        if(cJudgeKey==0x00)//按键按下，状态稳定。KeyIO按下为0，抬起为1
  74   1        {
  75   2          TestKeyLastTime=KeyIO;//记录状态
  76   2        }
  77   1        else if((cJudgeKey==0xFF) && (TestKeyLastTime!=KeyIO))//按键从按下到抬起，稳定
  78   1        {
  79   2          TestKeyLastTime=KeyIO;
  80   2          return 1;
  81   2        }     
  82   1        else 
  83   1        {
  84   2      
  85   2        }
  86   1        return 0;
  87   1      }
  88          
  89          unsigned char Judge5DKeyNum(unsigned char ADCValue)
  90          {
  91   1        static unsigned char xdata cFlag5D=0;//保存连接读入的键值
  92   1        static unsigned char xdata c5DkeyLastTime=0;//保存上次按键值
  93   1      //  static unsigned char xdata cNumLastTime=6;//记录上次确认的键值  
  94   1        static unsigned char xdata cKeyPressNum;
  95   1        unsigned char c5DkeyNow=7;
  96   1      
  97   1        
  98   1      //  unsigned char c5DkeyNow=7;
  99   1      //  unsigned char i=0;
 100   1      //  //判断当前读入ADC对应的按键值
 101   1      
 102   1      //  思路与单个按键相似
 103   1        //根据AD值得到当前键值
 104   1        if(ADCValue<=KeyThreshold[0]) c5DkeyNow=0;
 105   1        else if (ADCValue>KeyThreshold[0] && ADCValue<=KeyThreshold[1]) c5DkeyNow=1;
 106   1        else if (ADCValue>KeyThreshold[1] && ADCValue<=KeyThreshold[2]) c5DkeyNow=2;
 107   1        else if (ADCValue>KeyThreshold[2] && ADCValue<=KeyThreshold[3]) c5DkeyNow=3;
 108   1        else if (ADCValue>KeyThreshold[3] && ADCValue<=KeyThreshold[4]) c5DkeyNow=4;
 109   1        else if (ADCValue>KeyThreshold[4] && ADCValue<=KeyThreshold[5]) c5DkeyNow=5;
 110   1        else  c5DkeyNow=6;
 111   1      
 112   1        //记录按键
 113   1        if(c5DkeyNow==6)//抬起，记录一次
 114   1          cFlag5D=(cFlag5D<<1)&0;//左移记录１次
 115   1        else if(c5DkeyNow==c5DkeyLastTime)//AD判断的键值与上次相同，
 116   1          cFlag5D=(cFlag5D<<1)|1;//左移记录１次
C51 COMPILER V9.54   MYSELF                                                                10/21/2018 19:40:26 PAGE 3   

 117   1        else //特殊情况，本次非抬起，也与上次不同，基本不可能出现
 118   1          cFlag5D=(cFlag5D<<1)& 0;//左移记录１次
 119   1        
 120   1        c5DkeyLastTime=c5DkeyNow;//记录当前AD读的键值 
 121   1        
 122   1        //判断键值
 123   1        if(cFlag5D==0xFF)//连续8次读入一样
 124   1          cKeyPressNum=c5DkeyNow; //记录当前键值
 125   1        
 126   1        if(cFlag5D==0x00 && cKeyPressNum !=6 )//按键有效抬起，且前一次为有效按键
 127   1        {
 128   2          c5DkeyNow=cKeyPressNum; 
 129   2          cKeyPressNum=0x06;
 130   2          return c5DkeyNow;
 131   2        }
 132   1        else
 133   1          return 0x06;  
 134   1        
 135   1      }
 136          unsigned char* Hex2ASCII(long int long28Value)//8位值转化为ASCII
 137          {
 138   1        unsigned char xdata * cindexTempHex=0;
 139   1        char xdata i=0;
 140   1        
 141   1        for(i=7;i>=0;i=i-2)//高位在前
 142   1        {
 143   2          cindexTempHex[i]=long28Value;//利用默认数据类型转换，char为8位，取出lont int 的低8位
 144   2          cindexTempHex[i-1]=cindexTempHex[i]>>4;//取出8位中高4位 
 145   2          cindexTempHex[i]=cindexTempHex[i]-(cindexTempHex[i-1]<<4);//取出8位中的低4位
 146   2          long28Value=long28Value>>8;//低8位处理完毕，右移      
 147   2        }
 148   1      //  S1SendData(0xAA);   
 149   1        for(i=0;i<=7;i++)
 150   1        {
 151   2      
 152   2      //    S1SendData(cindexTempHex[i]);   
 153   2          if(cindexTempHex[i]<=9) cindexTempHex[i]+=0x30;//小于9转成ASCII
 154   2          else cindexTempHex[i]=cindexTempHex[i]+55;//大于9的数转成ASCII    
 155   2      //    S1SendData(cindexTempHex[i]);     
 156   2        }
 157   1        cindexTempHex[8]=0;//数组后加一个结束符
 158   1      //  S1SendString(cindexTempHex);//
 159   1      //  S1SendData(13);
 160   1      //  S1SendData(10); 
 161   1        return cindexTempHex;
 162   1        
 163   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    651    ----
   CONSTANT SIZE    =      7    ----
   XDATA SIZE       =      5       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
